- What is a Hash Table?
	- A hash table is a data structure that stores entries which are key-value pairs
		- Often referred as an associative array
	- The typical operations on a hash table are all expected* to be in O(1) time:
		- has: Check if a key exists in a table or not
		- put: Add a new entry or update an existing entry's value
		- get: Retrieve the value of a key in the table

- Python Dictionary
	- Python's built in dictionary, dict, is a hash table
		- ![[Pasted image 20231206080026.png]]

- Inefficient hash table implementation
	- A hash table implementation that uses two parallel lists does not have O(1) operations
		- The worst case scenario is O(N) because you must search through the entire list of keys to find the index of the associated value
			- ![[Pasted image 20231206080214.png]]

- Hash Table Implementation: Storage
	- We will use a single list that stores entries as key-value pairs
		- ![[Pasted image 20231206080243.png]]

- Hash Table Implementation: Hashing
	- To find an entry in O(1) time, we hash the key to find its location & retrieve the value
		- ![[Pasted image 20231206080326.png]]

- Hash Table Implementation: Size vs Capacity
	- Our hash table will have extra storage space to account for new entries being added
		- ![[Pasted image 20231206080410.png]]

- Hash Table Implementation: Hash Function
	- A user defined structure needs a way to designate its own hashing function
		- We will store this function in the table when creating it
			- ![[Pasted image 20231206080452.png]]

- Hash Table Implementation: Hash Code
	- Hash (object):
		- Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 & 1.0).
	- The hash code of a key can yield a number that is too large to feasibly build an entire table out of
		- ![[Pasted image 20231206080650.png]]

- Hash Table Implementation: Modulus Division
	- To solve the storage problem, we take the hash code of a key & mod it by the table's capacity to find its location
		- ![[Pasted image 20231206080750.png]]

- Hash Table Implementation: Creation
	- ![[Pasted image 20231206080812.png]]

- Hash Table Implementation: Put, Get, Has
	- Put:
		- ![[Pasted image 20231206080914.png]] 
	- Get:
		- ![[Pasted image 20231206080926.png]]
	- Has:
		- ![[Pasted image 20231206080937.png]]

- Hash Table Implementation: Collisions 
	- A collision occurs if two different keys hash to the same location in the table
		- ![[Pasted image 20231206081015.png]]

- Hash Table Implementation: Open addressing
	- To resolve the collision, we must probe forward until an open spot if found
		- Degrades O(1) performance of operations
		- Must use == on keys while probing to determine correct entry
		- Put, get & has all need to change to support this
		- Wrap around: *index = (index + 1) % htable.capacity*
	- Collisions are unavoidable but should be limited or else the hash table will be unhealthy
		- ![[Pasted image 20231206081401.png]]

- Rehashing
	- As the hash table becomes more full, the chance of collisions increases dramatically
		- Table load: *table.size รท table.capacity*
		- When the load reaches a threshold, build a larger table & rehash all the entries into the new table before allowing a new one to be added
		- Rehashing is costly but happens so infrequently that the operations overall are still considered to be in O(1) time
			- ![[Pasted image 20231206081552.png]]

- Alternate implementation: Chaining
	- An alternate way to resolve collisions in hash table is to chain the entries that the hash to the same location
		- The structure is a list of linked nodes
		- The same rules for open addressing apply when rehashing
			- ![[Pasted image 20231206081747.png]]


Initial quiz:
1. 
	- table: list of entries
	- size: number of current entries in the table
	- capacity: the maximum limit of entries allowed 
	- hash_func: a function that turns a key into a hash code

2. You have to make it immutable by changing the dataclass to Frozen

3. 
	- Entry: A key/value pair
	- Hash function: Turns a key into a hash code
	- Hash code: Integer values that helps in identifying an entry
	- Collision: When two entries have the same hash code
	- Open addressing: A method of hashing that avoids collisions by putting hash codes in the next available spot

4. Take the hash code of the key and use modulus division

5. 
	- a) ord("L") - ord("A") = 76 - 65 = 11 % 9 = 2
	- b) ![[Pasted image 20231206084556.png]]
	- c) Han Solo had 1 collision and Phasma has 4 collisions. A total of 5 collisions

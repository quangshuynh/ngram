- Week password: NodeStackQueue 

- Nodes, Stacks & Queues
	- Concept of data structures and abstract data types
	- Abstract data type:
		- Describes the capability of a data structure independent of its implementation
	- This lecture explores:
		- Recursive structures (*nodes*)
		- *Stack* abstract data type
		- *Queue* abstract data type

- Recursive data structures
	- Recursive function is one that calls itself
	- A recursive data structure is one that comprises a class (or classes) that has at least one field of its own type
		- Recursive data structure an be used to build linked sequences
			- Linked sequences can be used as the basis for implementing many different data structures

- Node
	- Recursive data structure
	- Two fields:
		- A value of some type
		- A reference to the next node in the sequence
	- A sequence of nodes can be created by joining the nodes together that each refers to the next node in the sequence
		- First node: head
		- Last node: tail
		- Tail's next node: null
	- Train analogy
		- ![[train nodes.png]]

- Singly Linked Node: Immutable
	- Defining a node will use a Dataclass
	- Frozen: Makes the node immutable after creation
	- Any: Means the value can be of any type
	- Union: Defines a set of types for the value
		- ![[dataclass node.png]]


- Abstract data types
	- A data structure is a grouping of related data
		- The data is referred as elements
	- Most data structures provide some common operations
		- Store, retrieve, remove, size
	- An abstract data type (ADT) defines the behavior of a data structure from the point of view of its user
	- Choosing the ADT that provides operations for solving a problem usually isn't enough
		- Each ADT may be implemented in multiple ways
		- Choosing the correct implementation is important
		- Requires understanding the complexity

- Identify Abstract Data Types
	-  **Queue**
		- *First-in, first out (FIFO*). Elements are removed in the same order that they were added. Does not provide random access
	-  **Dictionary**
		- Stores *key/value pairs*. Once added, a key can be used to retrieve its corresponding value. Keys are unique; if the same key is used more than once, the previous value is *replaced.* Keys are maintained in any particular order
	-  - **Stack**
		- *Last-in, first-out (LIFO).* Elements are removed in the opposite order that they were added. Does not provide random access
	- **Set**
		- Stores unique elements, meaning duplicates are ignored. Elements are not maintained in any particular order
	- **List**
		- A variable length data structure that grows in size as elements are added and shrinks as they are removed. Elements are maintained in the order that they are added


- Stacks
	- An abstract data type has at least the following operations
		- *push(element)* - adds an element to the top of the stack
		- *pop()* removes and returns an element from the top of the stack
		- *isEmpty()* returns *true* if the stack is empty and false otherwise
	- ***Last-in, first-out (LIFO) order***
		- Last element pushed is the first to be popped
		- First element pushed is the last the be popped
	- ![[stack python.png]]

- Stack concept
	- A stack is a list like data structure where items can only be added and removed from one end
		- The end is referred as the top of the stack
			- ![[top of the stack.png]]

- Push
	- The act of adding items to the stack
	- NodeStack stack = new NodeStack();
	- stack.push("a")
		- ![[stack push a.png]]
	- stack.push("b")
		- ![[stack push b.png]]
	- Top is a reference to the first item in the stack, push replaces it with a new item
	- Pushing adds an element to the top of a stack
		- Size 0
			- ![[size 0.png]]
		- Size 1
			- ![[size 1 stack.png]]
		- Size 2
			- ![[size 2.png]]
		- Size 3
			- ![[size 3.png]]
		- Size 4
			- ![[size 4.png]]

- Pop
	- The act of removing items from the stack
	- Popping removes the top element from the stack
	- Pop moves the top reference, it doesn't actually delete anything
	- String value1 = stack.pop();
		- ![[stack pop 1.png]]
	- String value 2 = stack.pop();
		- ![[stack pop 2.png]]


- Queues
	- An abstract data type that has at least the following operations:
		- *Enqueue* - Adds an element to the back of the queue
		- *Dequeue* - Removes an element from the front of the queue
		- *Size* - Returns the number of elements currently in the queue
	- A queue may have the following operations:
		- *Front* - Returns but does not remove the element at the front of the queue
		- *Back* - Returns but does not remove the element at the back of the queue
		- *Is empty* - returns True if the queue is empty, and false otherwise 
	- First-in, first-out (FIFO) order
		- The first element to be enqueued is the first element to be dequeued
		- The last element to be enqueued is the last element to be dequeued
	- Queues define its behavior from the perspective of its user, but does not include implementation details
	- Queues real world example
		- ![[queues real world example.png]]

- Queue concept
	- An ordered data structure where items are added at the back and removed from the front

- Enqueue
	- Act of adding items to the queue
	- Items are always added at the back

- Dequeue
	- The act of removing items from the queue
	- Items are always removed from the front

- Enqueuing diagram
	- ![[enqueuing diagram.png]]

- Dequeuing diagram
	- ![[dequeuing diagram.png]]


- Stack and Queue complexities
	- Node based stacks and queues are good with performance
		- ![[stack and queue complexities.png]]

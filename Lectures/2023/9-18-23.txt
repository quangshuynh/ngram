Week 4 quiz password: 

- Globals: Proper usage
	- Globals should only be used as **CONSTANTS** and **not** as variables
	- Functions should **RETURN** values and not use globals to pass information


- Tail recursion
	- A special class of recursion where the recursion call is the ***very last thing*** that the function does

- Accumulator
	- If a recursive function needs the return value from the recursive call before it can calculate its part, it can never be tail recursive
	- It needs to compute to its part of the result and combine it with the total before making the recursive call
	- Can solve this by adding an additional parameter
	- The base case and recursion should return the accumulator parameter
	- ![[Tail recursion.png]]
		- This is an example of tail recursion

- Reassignment
	- Variable is a name for an address in memory
		- Variable's memory is stored at that address
	- Initializing a variable
		1. Finds an available ***address*** in memory and stores the ***value***
		2. Adds the variable ***name*** and the ***address***
	- ***Reassignment*** allows the ***value to be changed*** stored at the ***address in memory***
	- ![[Reassignment.png]]


- Repetition
	- With recursion, we achieve the repetition by making an additional function call, stopping only when we reach the case base

- Loops
	- An iteration is each time a block is executed in a loop
		- Break statement
			- Just like a base case in a recursion
			- The break statement can be used to immediately stop a loop

- Code smell
	- The use of "break" in code is a code smell
		- There is usually a better & more graceful way to handle the problem

- while and Calculated values
	- Common to use while loops to calculate large values


- Timelines
	-![[Timelines.png]]
	- A row for each variable
	- A column for each iteration

- Default parameter values
	- Assigned in the function declaration using equals
	- 

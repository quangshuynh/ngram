Quang Huynh - qth9368

Questions:

1. What is the purpose of the pivot? Do you really need to choose the middle item as the pivot? Would
the algorithm have behaved differently if you had selected the first item as the pivot each time?:

In QuickSelect, the pivot determines the desired element's eventual location in a sorted order. It
is more common and balanced to use the middle item as the pivot. This is because when choosing the first
index as the pivot, there can be performance problems, especially when the data has already been sorted.
The efficiency of the algorithm can be greatly affected by the pivot position but it also depends on
if the list is sorted or not.





2. Specify at least 4 test cases varying the size of the list of distances and considering an empty list.
Does providing a sorted list impacts the efficiency of quickselect? Remember: a test case identifies
specific input values and expected outputs.

List1 = [3, 2, 5, 1] (quicksort) -> [1, 2, 3, 5]
List2 = [4, 8, 2, 7, 10] (quicksort) -> [2, 4, 7, 8, 10]
List3 = [1, 4, 2] (quicksort) -> [1, 2, 4]
List4 = [] (quicksort) -> [][][]

Yes, providing a sorted list does impact the efficiency of the quick select because using quicksort on a
sorted list would be the worst case. In the tree diagram of a quick select, there would only be a few splits, 
and it would check for more values if they are sorted for not.




3. What is the elapsed time performance of your median program using insertion sort when it processes
a large data set? What is the elapsed time performance of your median program using quickselect
when it processes the same large data set? Enter the elapsed times of several runs of each program
in your report.

test_data1.txt:
Trial 1:
Insertion sort - 8.070003241300583e-05
Quick select - 0.00011650007218122482

Trial 2:
Insertion sort - 7.780001033097506e-05
Quick select - 7.830001413822174e-05

Trial 3:
Insertion sort - 0.00014819996431469917
Quick select - 0.00011729996185749769



test_data2.txt:
Trial 1:
Insertion sort - 0.00012670003343373537
Quick select - 0.0001020999625325203

Trial 2:
Insertion sort - 0.00013200007379055023
Quick select - 6.0399994254112244e-05

Trial 3:
Insertion sort - 0.00011069991160184145
Quick select - 0.00011789996642619371



test_data_writeup.txt:
Trial 1: 
Insertion sort - 0.00012119999155402184
Quick select - 0.00014659995213150978

Trial 2:
Insertion sort - 0.000107599887996912
Quick select - 0.00011209992226213217

Trial 3:
Insertion sort - 7.389998063445091e-05
Quick select - 0.00014779996126890182



test_dataset10K.txt:
Trial 1:
Insertion sort - 4.081625699996948
Quick select - 0.030674800043925643

Trial 2:
Insertion sort - 4.048881500028074
Quick select - 0.033839200041256845

Trial 3:
Insertion sort - 4.171661600004882
Quick select - 0.020683499984443188



test_dataset25K.txt:
Trial 1:
Insertion sort - 26.27663490001578
Quick select - 0.050287800026126206

Trial 2:
Insertion sort - 25.469838599907234
Quick select - 0.04442730010487139

Trial 3:
Insertion sort - 25.025710599962622
Quick select - 0.060774600016884506



test_dataset25K_odd.txt:
Trial 1:
Insertion sort - 25.703556600026786
Quick select - 0.04295640008058399

Trial 2:
Insertion sort - 25.370019599911757
Quick select - 0.06269970000721514

Trial 3:
Insertion sort - 26.878661099937744
Quick select - 0.05064400006085634



test_dataset50K.txt:
Trial 1: 
Insertion sort - 100.28692149999551
Quick select - 0.07768419990316033

Trial 2:
Insertion sort - 100.54475100000855
Quick select - 0.09106279991101474

Trial 3:
Insertion sort - 103.38285629998427
Quick select - 0.0818496000720188



test_dataset50K_odd.txt:
Trial 1:
Insertion sort - 100.98293659999035
Quick select - 0.08126120001543313

Trial 2:
Insertion sort - 101.14853160001803
Quick select - 0.10904290003236383

Trial 3:
Insertion sort - 100.51755630003754
Quick select - 0.08310209994670004



test_dataset100K.txt:
Trial 1:
Insertion sort - 622.3346793999663
Quick select - 0.16114370001014322

Trial 2:
Insertion sort - 485.46451269998215
Quick select - 0.19682179996743798

Trial 3:
Insertion sort - 421.39487059996463
Quick select - 0.20886619994416833



test_dataset100K_odd.txt:
Trial 1:
Insertion sort - 452.0025440000463
Quick select - 0.17696760001126677

Trial 2:
Insertion sort - 466.32621570001356
Quick select - 0.2059103000210598

Trial 3:
Insertion sort - 419.1136847999878 
Quick select - 0.17193220008630306



